{-
Project Euler number 2
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
-}

module Main where

    --These first three functions are from Tate, Seven Languages
    
    lazyFib x y = x:(lazyFib y (x +y))

    --Adjusted to start with 1, 2 per this problem
    fib = lazyFib 1 2

    fibNth x = head (drop (x-1) (take (x) fib))

    --Need a function to return fib number from this sequence nearest but less than 4 000 000
    upperBound = 4000000
    lastTerm x = if fibNth x >= upperBound
        then (x-1)
        else lastTerm (x+1) 

    --Not thrilled with how that looks, but x needs to be passed for the recursion.
    --Given time, I'd ...
    
    --Shows fibonacci seq from 1 to last term before 4 000 000. Not strictly needed, but I like to peek.
    f  = take (lastTerm 1) fib

    --Takes as arg x index of last term to delimit fib sequence.
    --Lambda function maps evens only. Foldl accumulates.
    evenSum x = foldl (+) 0 (map (\y -> if rem y 2 == 0 then y else 0)  (take x fib))

{-    RESULTS

evenSum 10 produces 44, which was a test
lastTerm 1 produces 32 (last term by index less than 4 million)
(fibNth 32 produces 3 524 578)
evenSum 32 produces 4 613 732, confirmed correct at project euler!
    
-}
    --  main needs a value to compile
    main = undefined

